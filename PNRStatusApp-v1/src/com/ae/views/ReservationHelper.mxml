<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
	title="Reservation Date Calculator"
	showCloseButton="true" close="onCloseClick()"
	verticalGap="0" horizontalGap="0"  
	paddingLeft="0" paddingRight="0" paddingBottom="0"
	creationComplete="creationCompleteHandler()"
	layout="vertical" width="100%" height="100%">
	
	<mx:Script>
		<![CDATA[
			import com.ae.events.SettingsEvent;
			import com.ae.utils.FileOperations;
			import mx.events.ItemClickEvent;
			import mx.controls.Alert;
			import com.ae.events.RemindersEvent;
			import com.ae.vo.ReminderVO;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.managers.PopUpManager;
			
			//-----------------------------------------------------------------
			//
			//	Variables
			//
			//-----------------------------------------------------------------
	
			[Bindable]
			public var remindersColl:ArrayCollection;
			
			private var fileOperations:FileOperations;
			
			//-----------------------------------------------------------------
			//
			//	Methods
			//
			//-----------------------------------------------------------------
			
			private function creationCompleteHandler():void
			{
				// Create a file filter for the fileOperations
				var fileFilter:FileFilter = 
					new FileFilter("Reminder Files (*.rem)", "*.rem");
				fileOperations = new FileOperations();
				fileOperations.fileFilter = fileFilter
				// Initialize the dates
				var date:Date = new Date();
				calculate90DaysFrom(date);
				dateChooser.selectedDate = date;
			}
			
			private function calculate90DaysFrom(date:Date):void
			{
				var before3Months:Date = new Date(date);
				var after3Months:Date = new Date(date);
				
				// Calculate the offset dates
				before3Months.setDate(date.getDate() - 90);
				after3Months.setDate(date.getDate() + 90);
				
				// Display the dates
				before3MonthsText.text = before3Months.toDateString();
				after3MonthsText.text = after3Months.toDateString();
			}
			
			/**
			 * Function called when a date is selected
			 */
			private function onDateChange(event:CalendarLayoutChangeEvent):void
			{
				calculate90DaysFrom(event.newDate as Date);
			}
			
			/**
			 * Function called when the close button is clicked
			 */
			private function onCloseClick():void
			{
				PopUpManager.removePopUp(this);
			}
			
			/**
			 * Function clicked when the reset button is pressed
			 */
			private function onResetClick():void
			{
				dateChooser.selectedDate = new Date();
				calculate90DaysFrom(new Date());
			}
			
			/**
			 * Function invoked when the set reminder button is clicked
			 */
			private function onSetReminder():void
			{
				// Add to reminders coll
				var reminderVo:ReminderVO = new ReminderVO();
				reminderVo.date = dateChooser.selectedDate;
				reminderVo.description = "Reminder : ";
				
				var event:RemindersEvent = 
					new RemindersEvent(RemindersEvent.ADD_REMINDER);
				event.reminderVo = reminderVo;
				
				dispatchEvent(event); 
				
				Alert.show("The reminder has been set.", "Reminder Set");
			}
			/**
			 * Function invoked when any of the export or import
			 * buttons is clicked
			 */
			private function remindersItemClickHandler(event:ItemClickEvent):void
			{
				if(event.label == "Export")
				{
					fileOperations.browseForSave("Save");
					fileOperations.addEventListener(Event.COMPLETE, exportHandler);
				}
				else if(event.label == "Import")
				{
					fileOperations.browseForOpen("Open");
					fileOperations.addEventListener(Event.COMPLETE, importHandler);
				}
			}
			
			private function exportHandler(event:Event):void
			{
				fileOperations.removeEventListener(Event.COMPLETE, exportHandler);
				var settingsEvent:SettingsEvent = 
					new SettingsEvent(SettingsEvent.EXPORT_REMINDERS);
				settingsEvent.remindersFile = fileOperations.selectedFile;
				dispatchEvent(settingsEvent);
			}
			
			private function importHandler(event:Event):void
			{
				fileOperations.removeEventListener(Event.COMPLETE, importHandler);
				var settingsEvent:SettingsEvent = 
					new SettingsEvent(SettingsEvent.IMPORT_REMINDERS);
				settingsEvent.remindersFile = fileOperations.selectedFile;
				dispatchEvent(settingsEvent);
			}
		]]>
	</mx:Script>
	
	<!--export import labels data collection-->
	<mx:ArrayCollection id="exportImportLabels">
		<mx:Object label="Export"/>
		<mx:Object label="Import"/>
	</mx:ArrayCollection>
	
	<!--list effect-->
	<mx:DefaultListEffect id="listEffect" color="#e4e4e4"/>
	
	<mx:Spacer width="100%" height="2%"/>
	
	<!--tab navigator-->	
	<mx:TabNavigator id="tabNavigator" width="100%" height="98%" 
		verticalGap="0" horizontalGap="0">
		<!--calendar container-->
		<mx:HBox id="calendarContainer" width="100%" height="100%" verticalGap="0" horizontalGap="0"
			label="Calendar" verticalScrollPolicy="off" horizontalScrollPolicy="off">
			<mx:VBox width="27%" height="100%" verticalGap="0" horizontalGap="0"
				verticalAlign="top" horizontalAlign="center">
				<mx:Spacer width="100%" height="14%"/>
				<mx:Label text="-90" styleName="reallyBigFontStyle" textAlign="right" width="100%"/>
				<mx:Label text=" Days" styleName="reallyBigFontStyle" textAlign="right" width="100%"/>
				<mx:Spacer width="100%" height="5%"/>
				<mx:Label id="before3MonthsText" styleName="dateLabelText" width="100%" textAlign="center"/>
			</mx:VBox>
			<mx:VBox width="46%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<mx:Spacer width="100%" height="1%"/>
				<mx:Text text="Select the Date of Travel and click on Remind me" width="90%"
					verticalCenter="0"/>
				<mx:DateChooser id="dateChooser" verticalCenter="0" horizontalCenter="0"
					change="onDateChange(event)"/>
				<mx:HBox width="100%" height="20%" verticalGap="0" horizontalGap="0" horizontalAlign="center">
					<mx:Spacer width="5%" height="100%"/>
					<mx:Button label="Remind Me" click="onSetReminder()" toolTip="Set Reminder"/>
					<mx:Spacer width="5%" height="100%"/>
					<mx:Button label="Reset" click="onResetClick()" toolTip="Reset"/>
					<mx:Spacer width="5%" height="100%"/>
				</mx:HBox>
			</mx:VBox>
			<mx:VBox width="27%" height="100%" verticalGap="0" horizontalGap="0"
				verticalAlign="middle" horizontalAlign="center">
				<mx:Spacer width="100%" height="14%"/>
				<mx:Label text="+90" styleName="reallyBigFontStyle" textAlign="left" width="100%"/>
				<mx:Label text="Days" styleName="reallyBigFontStyle" textAlign="left" width="100%"/>
				<mx:Spacer width="100%" height="5%"/>
				<mx:Label id="after3MonthsText" styleName="dateLabelText" width="100%" textAlign="center"/>
			</mx:VBox>
		</mx:HBox>
		
		<!--reminders container-->
		<mx:VBox id="remindersContainer" label="Reminders" width="100%" height="100%"
			verticalGap="0" horizontalGap="0" paddingRight="2">
			<mx:List width="100%" height="98%" dataProvider="{remindersColl}"
				selectable="false" itemsChangeEffect="{listEffect}" 
				paddingRight="3"
				alternatingItemColors="[0xffffff, 0xf2f2f2]"
				itemRenderer="com.ae.renderers.RemindersRenderer"/>
			<mx:ControlBar width="100%" height="2%">
				<mx:Label text="Export or Import your Reminders"/>
				<mx:Spacer width="25%" height="100%"/>
				<mx:ButtonBar dataProvider="{exportImportLabels}"
					itemClick="remindersItemClickHandler(event)" 
					useHandCursor="true" buttonMode="true"/>
			</mx:ControlBar>
		</mx:VBox>
	</mx:TabNavigator>
	
</mx:TitleWindow>