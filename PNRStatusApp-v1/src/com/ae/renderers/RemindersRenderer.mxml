<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="35" backgroundColor="#ff9988" 
	xmlns:custom="com.ae.custom.*" 
	creationComplete="creationCompleteHandler()">
	
	<mx:Script>
		<![CDATA[
			import mx.events.CloseEvent;
			import mx.controls.Alert;
			import com.ae.utils.ReminderMessages;
			import mx.utils.ObjectUtil;
			import com.ae.utils.Utils;
			import mx.formatters.DateFormatter;
			import com.ae.events.RemindersEvent;
			import com.ae.managers.AssetManager;
			import com.ae.vo.ReminderVO;
			
			//---------------------------------------------------------------------
			//
			// Variables
			//
			//---------------------------------------------------------------------
			
			/**
			 * @private
			 */
			 private var _data:Object;
			
			[Bindable]
			override public function set data(value:Object):void
			{
				_data = value;
				if(value && value is ReminderVO)
				{
					setData();
				}
			}
			
			override public function get data():Object
			{
				return _data;
			}
			
			[Bindable]
			private var assets:AssetManager;
			
			//---------------------------------------------------------------------
			//
			// Methods
			//
			//---------------------------------------------------------------------
		
			/**
			 * Function called upon creation complete of the component
			 */
			private function creationCompleteHandler():void
			{
				assets = AssetManager.getInstance();
				outerCanvas.filters = [new DropShadowFilter()];
			}
			
			/**
			 * Function to set the data
			 */
			private function setData():void
			{
				// Create a dateFormatter to show the date
				var dateFormatter:DateFormatter = new DateFormatter();
				var travelDate:Date = (data as ReminderVO).date;
				var reservationDate:Date = new Date(travelDate);
				reservationDate.setDate(travelDate.getDate() - 90);
				
				// Get the current date and remove the time part so we can 
				// compare properly with the reservationDate
				var currentDate:Date = new Date();
				currentDate.hours = 0;
				currentDate.minutes = 0;
				currentDate.seconds = 0;
				currentDate.milliseconds = 0;
				
				dateFormatter.formatString = "MMM D, YYYY";				
				reminderDateText.text = dateFormatter.format(travelDate);			
				
				var differenceDays:Number;
				var difference:int = ObjectUtil.dateCompare(currentDate, reservationDate);
				if(difference == 0)
				{
					// Book today
					daysLeftLabel.text = ReminderMessages.BOOKING_STARTS_TODAY;
					outerCanvas.styleName = "remindersCanvasStyleYellow";
				}
				else if( difference == -1)
				{
					// Some days remain	
					differenceDays = Utils.getDaysDifference(currentDate, reservationDate);
					if(differenceDays == 0)
					{
						daysLeftLabel.text = ReminderMessages.BOOKING_STARTS_TODAY;
						outerCanvas.styleName = "remindersCanvasStyleYellow";
					}
					else if(differenceDays > 0)
					{
						var daysText:String = (differenceDays == 1)?" day ":" days ";
						daysLeftLabel.text = "(" + differenceDays + daysText + "left)";
						outerCanvas.styleName = "remindersCanvasStyleGrey";
					}
					else
					{
						daysLeftLabel.text = ReminderMessages.BOOK_NOW;
						outerCanvas.styleName = "remindersCanvasStyleYellow";
					}
				}
				else
				{
					differenceDays = Utils.getDaysDifference(reservationDate, currentDate);
					if(differenceDays > 0 && differenceDays <= 90)
					{
						daysLeftLabel.text = ReminderMessages.BOOK_NOW;
						outerCanvas.styleName = "remindersCanvasStyleGreen";
					}
					else
					{
						daysLeftLabel.text = ReminderMessages.BOOKING_DATE_PASSED;
						outerCanvas.styleName = "remindersCanvasStyleRed";
					}
				}
			}
			
			/**
			 * Handler function invoked when the editable label fiels 
			 * is updated
			 */
			private function labelUpdatedHandler(event:Event):void
			{
				var newReminderVo:ReminderVO = new ReminderVO();
				newReminderVo.date = (data as ReminderVO).date;
				newReminderVo.description = event.target.data;
				
				var reminderEvent:RemindersEvent = 
					new RemindersEvent(RemindersEvent.UPDATE_REMINDER);
				reminderEvent.reminderVo = data as ReminderVO;
				reminderEvent.newReminderVo = newReminderVo;
				
				dispatchEvent(reminderEvent);
			}
			
			/**
			 * Handler function invoked when the remove button is clicked
			 */
			private function onRemoveClick():void
			{
				Alert.show("Are you sure you want to delete this reminder?",
					"Delete Reminder",Alert.YES | Alert.NO, this, closeHandler);
			}
			
			private function closeHandler(event:CloseEvent):void
			{
				if(event.detail == Alert.YES)
				{
					var reminderEvent:RemindersEvent = 
					new RemindersEvent(RemindersEvent.REMOVE_REMINDER);
					reminderEvent.reminderVo = data as ReminderVO;
				
					dispatchEvent(reminderEvent);
				}
			}
			
		]]>
	</mx:Script>
	
	<mx:Binding source="data.description" destination="labelNotes.labelText"/>
	
	<custom:GradientCanvas id="outerCanvas" width="98%" height="95%" 
		verticalCenter="0" horizontalCenter="0">
		
		<mx:HBox id="innerContainer" width="99%" height="100%" styleName="whiteLabelFont"
		 	verticalGap="0" horizontalGap="0" verticalAlign="middle"
		 	verticalScrollPolicy="off" horizontalScrollPolicy="off">
			
			<mx:Spacer width="1%" height="100%"/>
			
			<mx:Canvas width="22%" height="100%" verticalScrollPolicy="off" 
				horizontalScrollPolicy="off">
				<mx:Text id="reminderDateText" width="100%" 
					toolTip="To Book ticket for the day"
					verticalCenter="0" horizontalCenter="0"/>
			</mx:Canvas>
			
			<mx:Label id="daysLeftLabel" width="{innerContainer.width * 0.38}" 
				truncateToFit="true"/>
			
			<mx:Spacer width="0.5%" height="100%"/>
			
			<custom:EditableLabel id="labelNotes"
				imageSource="{AssetManager.getInstance().SelectedIcon}" 
				labelUpdated="labelUpdatedHandler(event)"
				width="30%" height="22" borderColor="#f8f8f8" borderStyle="solid"/>
			
			<mx:Spacer width="0.5%" height="100%"/>
			
			<mx:Canvas width="8%" height="100%" verticalCenter="0" horizontalCenter="0">
				<mx:Image source="{assets.RemoveIcon}"
					click="onRemoveClick()" buttonMode="true"
					right="2"  verticalCenter="0"
					toolTip="Remove" useHandCursor="true"/>
			</mx:Canvas>
		
		</mx:HBox>
	</custom:GradientCanvas>
</mx:Canvas>